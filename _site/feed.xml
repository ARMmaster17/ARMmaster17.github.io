<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joshua Zenn</title>
    <description>Technology, science, music, gaming, and sometimes crudely drawn art.</description>
    <link>https://armmaster17.github.io/</link>
    <atom:link href="https://armmaster17.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 29 Apr 2017 23:01:03 -0400</pubDate>
    <lastBuildDate>Sat, 29 Apr 2017 23:01:03 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Getting Started With Disco MapReduce</title>
        <description>&lt;p&gt;A while back, I wanted to learn how to use Hadoop. I prefer to self-host my stuff as it’s free (as in pizza), and free (as in speech).&lt;/p&gt;

&lt;p&gt;I almost immediately ran into issues getting it set up. First off, it turns out Hadoop uses Java, which I hate. It also has insane memory requirements, which my homelab couldn’t handle. To top it off, the installation docs were too confusing for something that I would use for 10 minutes and then never touch again.&lt;/p&gt;

&lt;p&gt;Then I found &lt;a href=&quot;http://discoproject.org&quot;&gt;Disco&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Hadoop, Disco has libraries for use in Python, which I find slightly more acceptable than Java. It also has an extremely small footprint. I was able to run a testing worker with 256mb of RAM, 1 CPU, and 1 GB of hard drive space (including all of its dependencies).&lt;/p&gt;

&lt;p&gt;The one remaining problem, is that following the installation instructions for Disco has probably been one of the most frustrating pieces of software I’ve ever had to install. You know you’ve spent too much time trying when you’re reading a 5 year old GitHub issue, tracking down an Erlang issue related to a cross-language pipe library, all just by following the “Getting Started” guide. Of course, &lt;a href=&quot;https://xkcd.com/1742/&quot;&gt;there’s an XKCD for that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This guide is written as a fool-proof guide for anyone else who wants to get up and running with Disco with minimal hassle.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;1. Prerequisites&lt;/h2&gt;
&lt;p&gt;There are several ways of accomplishing this. I personally used my Proxmox cluster split out over 6 different machines, all behind a private subnet with a firewall. You can do whatever as long as you meet the following requirements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At least one machine (preferably more, dedicated boxes like docker containers or VMs)&lt;/li&gt;
  &lt;li&gt;CentOS 7 (anything else and you are on your own)&lt;/li&gt;
  &lt;li&gt;A configurable DNS server in your network (if you think you can cheat with the HOSTS file, you are in for a world of hurt)&lt;/li&gt;
  &lt;li&gt;A free afternoon (Seriously, this could take a while)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hello-bash-my-old-friend&quot;&gt;2. Hello bash my old friend&lt;/h2&gt;
&lt;p&gt;Go ahead and turn your machines on or provision your VMs. You can do one, or two, (or twenty, as I did). Make sure all of them are running CentOS 7. The minimum specs I got away with was 1 CPU, 512mb of RAM, and 1GB of hard drive space. If you are creating multiple “workers”, each one only needs 256mb of RAM. 512mb is only needed for the “master” node. Of course, if you intend on running bigger datasets than me, you will need to increase this number.&lt;/p&gt;

&lt;p&gt;For each box you create, you will need to create a corresponding entry on your DNS server. How to do this is beyond the scope of this article and depends on what software you choose to use for this. I was able to just add the entries to my pfSense router using the configuration page. If your router can’t do this, take a look at a BIND server.&lt;/p&gt;

&lt;p&gt;Now boot all of the boxes and run the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;yum install openssh-server openssh-client openssl-devel -y
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-keygen -N &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt; -f ~/.ssh/id_dsa
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;service sshd restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This sets everything up for SSH connections between the master node and the workers.&lt;/p&gt;

&lt;h2 id=&quot;installing-erlang-on-the-first-try-sometimes&quot;&gt;3. Installing Erlang on the first try (sometimes)&lt;/h2&gt;

&lt;p&gt;Now we have to install Erlang. This is a pain to set up on CentOS for some reason. All the tutorials I found were either 5 years old or not for my distro. The solution I found was Kerl. Type the following commands into the terminals on all the machines.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -O https://raw.githubusercontent.com/kerl/kerl/master/kerl
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod a+x kerl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This gets Kerl all set up so we can install Erlang. Before we clone and build Erlang though, we need to install some additional dependencies.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;yum install tar gcc make perl ncurses-devel git -y&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can install Kerl. Run the following commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./kerl build 17.5 17.5
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./kerl install 17.5 erlang/17_5/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;. /root/erlang/17_5/activate
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;erl -version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If that works without any errors, you are now good to go. Now we can install Disco.&lt;/p&gt;

&lt;h2 id=&quot;time-for-the-actual-installation&quot;&gt;4. Time for the (actual) installation&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone git://github.com/discoproject/disco.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;disco&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, what you need to do next depends on the type of installation you are performing. If you are installing the master node (or doing a single-machine install), run this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if you are creating a worker node that doesn’t need the web GUI, run this instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make install-node&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, on both the master and worker nodes, set up the python libraries.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;lib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python setup.py install --user
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;developing-trust-in-your-cluster-using-math-and-crypto-stuff&quot;&gt;5. Developing trust in your cluster (using math and crypto-stuff)&lt;/h2&gt;

&lt;p&gt;The last part is to set up the Erlang cookie and SSH keys. On the master server, run the disco service and stop it by running the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bin/disco start
// Wait a few seconds...
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bin/disco stop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now run the following on your master node. Replace NODE with the DNS-resolvable name of each of your worker boxes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-copy-id localhost
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;scp ~/.erlang.cookie localhost:
// Now run these two commands &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;every worker box you have,
// replacing NODE with the DNS resolvable name.
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-copy-id NODE
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;scp ~/.erlang.cookie NODE:&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, run the following on all the nodes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bin/disco nodaemon&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, you should be able to follow the instructions in the documentation on &lt;a href=&quot;http://disco.readthedocs.io/en/develop/start/install.html#add-nodes-to-disco&quot;&gt;adding all of your nodes to the web GUI&lt;/a&gt; and running the &lt;a href=&quot;http://disco.readthedocs.io/en/develop/start/install.html#test-the-system&quot;&gt;test wordcount program&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 13:00:00 -0400</pubDate>
        <link>https://armmaster17.github.io/2017/04/27/getting-started-with-disco-mapreduce/</link>
        <guid isPermaLink="true">https://armmaster17.github.io/2017/04/27/getting-started-with-disco-mapreduce/</guid>
        
        
        <category>disco</category>
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>TODO: title</title>
        <description>&lt;p&gt;About seven years ago, author Jane McGonigal gave a TED talk, stressing a peculiar point that we “need to be playing more video games”.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;strong&gt;TODO: Rest of intro&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For a long time, I was your typical gamer. I liked most of the popular video game titles out there such as Battlefield, Minecraft, Prison Architect, and everything in between. About two years ago, I stumbled across a game called Kerbal Space Program. It looked interesting enough, build a rocket, go to the moon, and try to not blow up. It seemed simple enough, but within my first hour of playing the game, that statement couldn’t be farther from the truth. Almost all of my first few missions ended up something &lt;a href=&quot;https://www.youtube.com/watch?v=UKUz5ZUPqM8&quot;&gt;like this&lt;/a&gt;. As I would do with any other game where I hit a dead-end with my current knowledge, I turned to the Internet for help. I found wiki pages and videos explaining concepts of the game. The more I learned, the more complex rockets I was able to build, which led to more numerous and difficult problems. Eventually, I started to cross a line where in-game “key sequences” suddenly turned into complex formulas and simulations using NASA’s GMAT tool. My reading list slowly started to get replaced with various math and aerospace engineering books. My free time between my classes was spent toying with formulas for a perfect Hohmann maneuver on my next mission. All of this, just from playing one game. It didn’t stop there though.&lt;/p&gt;

&lt;p&gt;A few months ago, I was randomly clicking through Reddit until I came across the &lt;a href=&quot;reddit.com/r/hoggit&quot;&gt;r/hoggit&lt;/a&gt; subreddit. I had spent some time fooling around back in the day with Microsoft Flight Simulator 98 and 2000, but wasn’t really interested by it. The sub itself revolved around several different sims, but mainly stood behind DCS: World. Flipping through the Steam page, it was a military combat flight sim. It used highly accurate simulations combined with highly detailed aircraft to make it more or less the most advanced flight sim you’re going to get on a home PC. It was free, and my PC could handle it, so I figured I would give it a try. Launching the sim for the first time threw me straight into the cockpit of a Russian SU-25T. My first couple of free flights (i.e. no enemies), ended in giant balls of fire. My first few firefights involved me flying into a panic and performing pointless barrel rolls at the slightest hint of a radar lock from enemy aircraft. Over time, however, I got better at it. After about a week, I was able to land without making a crater. After about four weeks (and buying an actual air superiority fighter, the Russian SU-27) I was able to calmly zip around in combat, mowing down AI aircraft left and right. Over time though, I started looking into how real world pilots fly their planes. I learned what all that in game radio chatter actually meant. I learned what vectors are and how to navigate using them. I even learned what happens when you &lt;a href=&quot;https://www.youtube.com/watch?v=xsp0kGrwXW4&quot;&gt;punch out above mach 1&lt;/a&gt; (basically death). &lt;strong&gt;TODO: Finish anecdote-DCS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO: Find external link between gaming and learning opportunities.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO: Tie in to education system reform.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO: Message to educators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO: Message to parents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO: Message to students&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO: Message to video game developers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO: Warning of evil (games are both good and evil)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dE1DuBesGYM&quot;&gt;https://www.youtube.com/watch?v=dE1DuBesGYM&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 13:00:00 -0400</pubDate>
        <link>https://armmaster17.github.io/2017/04/27/unnamed/</link>
        <guid isPermaLink="true">https://armmaster17.github.io/2017/04/27/unnamed/</guid>
        
        
        <category>videogames</category>
        
        <category>school</category>
        
        <category>education</category>
        
      </item>
    
  </channel>
</rss>
